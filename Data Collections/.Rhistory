),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, value))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = unique(exports$TIER.1.DESCRIPTION),
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
unique(exports$TIER.1.DESCRIPTION)
unique(rownames(exports))
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = unique(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
x<-c(1,2,3,4)
x
exports$TIER.1.DESCRIPTION
unique(exports$TIER.1.DESCRIPTION)
type(unique(exports$TIER.1.DESCRIPTION))
x<- unique(exports$TIER.1.DESCRIPTION)
unlist(x)
purrr::flatten_dbl(x)
as.vector.factor(x)
as.vector.factor(x, mode = "any")
as.vector.factor(x, mode = "list")
as.vector.factor(x, mode = "character")
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = as.vector.factor(unique(exports$TIER.1.DESCRIPTION), mode = "character"),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
as.vector.factor(unique(exports$TIER.1.DESCRIPTION), mode = "character")
unique(exports$TIER.1.DESCRIPTION)
as.list(exports$TIER.1.DESCRIPTION)
levels(exports$TIER.1.DESCRIPTION)
x<-levels(exports$TIER.1.DESCRIPTIO)
is.factor(x)
is.list(x)
is.vector(x)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
checkboxGroupInput(
inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
if(interactive()){
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output, session) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION)
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
}
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
CH_tariff
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
output$tariffplot<- renderPlotly({
plot_tariffs(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
output$tariffplot<- renderPlotly({
plot_tariffs(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot"),
plotlyOutput("tariffplot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
