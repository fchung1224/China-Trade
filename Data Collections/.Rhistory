plotOutput("plot")
)
)
unique(exports$TIER.1.DESCRIPTION)
unique(rownames(exports))
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = unique(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
x<-c(1,2,3,4)
x
exports$TIER.1.DESCRIPTION
unique(exports$TIER.1.DESCRIPTION)
type(unique(exports$TIER.1.DESCRIPTION))
x<- unique(exports$TIER.1.DESCRIPTION)
unlist(x)
purrr::flatten_dbl(x)
as.vector.factor(x)
as.vector.factor(x, mode = "any")
as.vector.factor(x, mode = "list")
as.vector.factor(x, mode = "character")
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = as.vector.factor(unique(exports$TIER.1.DESCRIPTION), mode = "character"),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
as.vector.factor(unique(exports$TIER.1.DESCRIPTION), mode = "character")
unique(exports$TIER.1.DESCRIPTION)
as.list(exports$TIER.1.DESCRIPTION)
levels(exports$TIER.1.DESCRIPTION)
x<-levels(exports$TIER.1.DESCRIPTIO)
is.factor(x)
is.list(x)
is.vector(x)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
checkboxGroupInput(
inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION),
selected = "all",
multiple = TRUE
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
#Multiple Lines in one graph**
#data --> includes all*
exports
#Define a plotting function
if(interactive()){
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION %in% product)%>%
group_by(Date,TIER.1.DESCRIPTION)%>%
mutate(value = sum(value))
ggplot(export_data, aes(x = Date, y = value, color = product))+
geom_line()+
labs(title = paste("Exports of ",product))
}
# Build the shiny server
server <- function(input, output, session) {
output$plot <- renderPlot({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
selectizeInput(inputId = "product",
label = "Select Products:",
choices = levels(exports$TIER.1.DESCRIPTION)
)
),
mainPanel(
h4("Plot:"),
plotOutput("plot")
)
)
}
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
CH_tariff
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
output$tariffplot<- renderPlotly({
plot_tariffs(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
#data --> includes all*
exports
#Define a plotting function
plot_exports<- function(product){
export_data<-
exports%>%
filter(TIER.1.DESCRIPTION == product)%>%
group_by(Date)%>%
mutate(value = sum(value))
p<- ggplot(export_data, aes(x = Date, y = value))+
geom_line()+
labs(title = paste("Exports of ",product))
ggplotly(p)
}
plot_tariffs<- function(product){
EXP_Tariff<-
CH_tariff%>%
filter(TIER.1.DESCRIPTION %in% product)
p<- ggplot(EXP_Tariff, aes(x = Date, y = effective_tariff_increase, color = Product.Description))+
geom_step()+
geom_point()
ggplotly(p)
}
# Build the shiny server
server <- function(input, output) {
output$plot <- renderPlotly({
plot_exports(product = input$product)
})
output$tariffplot<- renderPlotly({
plot_tariffs(product = input$product)
})
}
# Build the shiny user interface
ui <- fluidPage(
radioButtons(
inputId = "product",
label = "product",
choices = unique(exports$TIER.1.DESCRIPTION)
),
mainPanel(
h4("Plot:"),
plotlyOutput("plot"),
plotlyOutput("tariffplot")
)
)
# Run the shiny app!
shinyApp(ui = ui, server = server)
data<-read.csv("imports.csv")
data
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
data%>%
!filter(nchar(Date)==4)
data<-read.csv("imports.csv")
data
data%>%
!filter(nchar(Date)==4)
data%>%
!filter(nchar(Date)=4)
data%>%
!filter(nchar(Date)==4)
data%>%
filter(nchar(Date)==4)
data%>%
mutate(gsub("[^0-9.]", "",  Date))
data%>%
mutate(Year = gsub("[^0-9.]", "",  Date))
data%>%
mutate(Year = gsub("[^0-9.]", "",  Date))%>%
mutate(Month = gsub("[^a-zA-Z]", "", Date))
data<-data%>%
mutate(Year = gsub("[^0-9.]", "",  Date))%>%
mutate(Month = gsub("[^a-zA-Z]", "", Date))
yearly<-
data%>%
filter(nchar(Year)==4)
yearly
imp<-
data%>%
semi_join(yearly)
imp
imp<-
data%>%
anti_join(yearly)
imp
imp%>%
mutate(Month = match(Month,month.abb))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = "20"+Year)
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = paste("20",Year))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = paste("20",Year,sep = ""))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = as.numeric(paste("20",Year,sep = "")))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = as.numeric(paste("20",Year,sep = "")))%>%
mutate(Imports = gsub(",","",Imports))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = as.numeric(paste("20",Year,sep = "")))%>%
mutate(Imports = as.numeric(gsub(",","",Imports)))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = (paste("20",Year,sep = "")))%>%
mutate(Month = as.character(Month))%>%
mutate(Imports = as.numeric(gsub(",","",Imports)))%>%
mutate(Date = paste(Year,Month,"01",sep = "-"))
imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = (paste("20",Year,sep = "")))%>%
mutate(Month = as.character(Month))%>%
mutate(Imports = as.numeric(gsub(",","",Imports)))%>%
mutate(Date = paste(Year,Month,"01",sep = "-"))%>%
mutate(Date = as.Date(Date, tryFormats = "%Y-%m-%d"))
imp<-imp%>%
mutate(Month = match(Month,month.abb))%>%
mutate(Year = (paste("20",Year,sep = "")))%>%
mutate(Month = as.character(Month))%>%
mutate(Imports = as.numeric(gsub(",","",Imports)))%>%
mutate(Date = paste(Year,Month,"01",sep = "-"))%>%
mutate(Date = as.Date(Date, tryFormats = "%Y-%m-%d"))
exports<-read.csv("exports.csv")
exports
exports%>%
group_by(Year)%>%
summarise(exports = sum(value))
exp<-exports%>%
group_by(Year)%>%
summarise(exports = sum(value))
exp<-exports%>%
group_by(Date)%>%
summarise(exports = sum(value))
exp
imp
imp%>%select(Date, Imports)
exp
imp%>%select(Date, Imports)
exp
exp<-exports%>%
group_by(Date)%>%
summarise(exports = sum(value))%>%
mutate(Date = as.Date(Date))
exp
imp<-imp%>%select(Date, Imports)
exp
all<-
exp%>%
left_join(imp)
all
exp<-exports%>%
group_by(Date)%>%
summarise(exports = sum(value))%>%
mutate(Date = as.Date(Date))%>%
mutate(Exports = "Exports")
exp
exp<-colnames("Date", "Value", "Exports")
colnames(exp)<-c("Date", "Value", "Exports")
exp
exp<-exports%>%
group_by(Date)%>%
summarise(exports = sum(value))%>%
mutate(Date = as.Date(Date))%>%
mutate(Type = "Exports")
colnames(exp)<-c("Date", "Value", "Type")
exp
imp<-imp%>%select(Date, Imports)%>%
mutate(Type = "Imports")
imp
all<-rbind(exp,imp)
colnames(imp)<-c("Date", "Value", "Type")
all<-rbind(exp,imp)
all
all%>%
ggplot(aes(x = Date, y = Value))+
geom_line()
all%>%
ggplot(aes(x = Date, y = Value, color = Type))+
geom_line()
p<-all%>%
ggplot(aes(x = Date, y = Value, color = Type))+
geom_line()
