tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01, 0.2, 0.3, .02)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 7),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
rpart.plot(tree_model$finalModel)
tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01, 0.2, 0.3, .02)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 30),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
rpart.plot(tree_model$finalModel)
# Construct trees
tree_model <- train(
climate_change ~.-income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = seq(0,0.4, length = 30)),
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best"),
control = rpart.control(minbucket = 30),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
# Construct trees
tree_model <- train(
climate_change ~.-income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = seq(0,0.4, length = 30)),
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best")
metric = "Accuracy",
# Construct trees
tree_model <- train(
climate_change ~.-income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = seq(0,0.4, length = 30)),
trControl = trainControl(method = "cv", number = 10, selectionFunction = "best"),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01, 0.2, 0.3, .02)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 30),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01, 0.2, 0.3, .02)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 20),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
rpart.plot(tree_model$finalModel)
mean(tree_model$resample$Accuracy)
tree_model$bestTune$cp
tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01:0.4)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 20),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
processed_survey_data$wise_unwise
processed_survey_data$wise_unwise
ocessed_survey_data$wise_unwise
mean(tree_model$resample$Accuracy)
tree_model<- train(
climate_change ~ . -income,
data = processed_survey_data,
method = "rpart",
tuneGrid = data.frame(cp = c(0.01:0.4)),
trControl = trainControl(method = "cv", number = 10),
control = rpart.control(minbucket = 20),
metric = "Accuracy",
na.action = na.omit
)
plot(tree_model)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
export_tariff<-read.csv("export_tariff_final.csv")
export_tariff<-export_tariff%>%
mutate(hs4= ifelse(nchar(hs4)==3,paste("0",hs4,sep="") ,hs4))
export_tariff<-export_tariff%>%
mutate(perc_change_tariff= effective_tariff*100)%>%
mutate(Date = as.Date(Date))
colnames(export_tariff)<-c("X","hs4","Tariff","imposed_by","Date","effective_tariff_increase","perc_change_tariff")
export_tariff
chn16<-export_tariff%>%
filter(Tariff == "chn16")%>%
group_by(hs4)%>%
summarise(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn16")
chn16
chn3<-
export_tariff%>%
filter(Tariff == "chn16"|Tariff =="chn3")%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn3")
chn34<-export_tariff%>%
filter(Tariff == "chn16"|Tariff =="chn3"|Tariff == "chn34")%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn34")
chn60b1<-export_tariff%>%
filter(Tariff == "chn16"|Tariff =="chn3"|Tariff == "chn34"|Tariff =="chn60b1")%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn60b1")
chn60b2<-export_tariff%>%
filter(Tariff == "chn16"|Tariff =="chn3"|
Tariff == "chn34"|Tariff =="chn60b1"|Tariff=="chn60b2")%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn60b2")
chn75b1<-export_tariff%>%
filter(Tariff == "chn16"|Tariff =="chn3"|
Tariff == "chn34"|Tariff =="chn60b1"|Tariff=="chn60b2"|
Tariff == "chn75b1")%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn75b1")
chn75b2<-export_tariff%>%
group_by(hs4)%>%
summarize(effective_tariff = sum(effective_tariff_increase))%>%
mutate(Tariff = "chn75b2")
a<-rbind(chn16,chn3,chn34,chn60b1,chn60b2,chn75b1,chn75b2)
final<-export_tariff%>%
left_join(a)
final%>%
filter(hs4 =="0101"|hs4 =="0202")%>%
ggplot(aes(x = Date, y = effective_tariff, color = hs4))+
geom_point()+
geom_step()+
ylim(0,1)
export_tariff
export_tariff%>%
filter(hs4 =="0101"|hs4 =="0202")%>%
ggplot(aes(x = Date, y = perc_change_tariff, color = hs4))+
geom_point()+
geom_step()
hs_index<-
read.csv("hs_index.csv")
hs_index_1<-hs_index%>%
filter(Tier == 2)%>%
select(hs4,Product.Description)
hs_index_2<-
hs_index%>%
filter(Tier == 1)%>%
select(hs4,Product.Description)
colnames(hs_index_2)<-
c("hs2","TIER 1 DESCRIPTION")
write.csv(final,"final.csv")
final%>%
filter(hs4 =="0101"|hs4 =="0202")%>%
ggplot(aes(x = Date, y = effective_tariff, color = hs4))+
geom_point()+
geom_step()+
ylim(0,1)
hs_index<-
read.csv("hs_index.csv")
hs_index_1<-hs_index%>%
filter(Tier == 2)%>%
select(hs4,Product.Description)
hs_index_2<-
hs_index%>%
filter(Tier == 1)%>%
select(hs4,Product.Description)
colnames(hs_index_2)<-
c("hs2","TIER 1 DESCRIPTION")
hs_index_2
hs_index_1
hs_index_1<-hs_index%>%
filter(Tier == 2)%>%
select(hs4,Product.Description)%>%
mutate(hs2= substr(hs4,start=1,end=2))
hs_index_1<-hs_index%>%
filter(Tier == 2)%>%
select(hs4,Product.Description)%>%
mutate(hs2= substr(hs4,start=1,finish=2))
hs_index_1<-hs_index%>%
filter(Tier == 2)%>%
select(hs4,Product.Description)%>%
mutate(hs2= substr(hs4,start=1,stop=2))
hs_index_1
hs_index_2
hs_index_final<-
hs_index_1%>%
left_join(hs_index_2)
hs_index_final
hs_index_2
write.csv(hs_index_2,"hs_index_2.csv")
hs_index_2<-read.csv("hs_index_2.csv")
hs_index_2
hs_index_final<-
hs_index_1%>%
left_join(hs_index_2)
hs_index_2
hs_index_2<-
hs_index_2%>%
mutate(else if nchar(hs2)=1,hs2 = paste("0",as.character(hs2)),hs2)
hs_index_2<-
hs_index_2%>%
mutate(hs2 = else if nchar(hs2)=1,hs2 = paste("0",as.character(hs2)),hs2)
hs_index_2<-
hs_index_2%>%
mutate(hs2 = elseif nchar(hs2)=1,hs2 = paste("0",as.character(hs2)),hs2)
hs_index_2<-
hs_index_2%>%
mutate(hs2 = ifelse nchar(hs2)=1,hs2 = paste("0",as.character(hs2)),hs2)
hs_index_2<-
hs_index_2%>%
mutate(hs2 = ifelse nchar(hs2)==1,hs2 = paste("0",as.character(hs2)),hs2)
hs_index_2<-
hs_index_2%>%
mutate(hs2 = ifelse(nchar(hs6)==1,paste("0",hs6,sep="") ,hs6))
hs_index_2<-
hs_index_2%>%
mutate(hs2 = ifelse(nchar(hs2)==1,paste("0",hs2,sep="") ,hs2))
hs_index_final<-
hs_index_1%>%
left_join(hs_index_2)
hs_index_final
hs_index_final%>%
select(hs4, TIER.1.DESCRIPTION,Secotr)
hs_index_final%>%
select(hs4, TIER.1.DESCRIPTION,Sector)
hs_index_final%>%
select(hs4, TIER.1.DESCRIPTION,Sector,Product.Description)
names<-hs_index_final%>%
select(hs4, TIER.1.DESCRIPTION,Sector,Product.Description)
write.csv(names,"names.csv")
install.packages("shiny")
export_tariff%>%
left_join(names)
export_tariff_final<-export_tariff%>%
left_join(names)
write.csv(export_tariff_final,"exoort_tariff_final.csv")
library(shiny)
selectInput(
inputId = "ExampleDropDown", label = "Please Make a Selection",
choices = list(
"Value 1" = 1,
"Value 2" = 2,
"Value 3" = 3,
)
)
selectInput(
inputId = "ExampleDropDown", label = "Please Make a Selection",
choices = list(
"Value 1" = 1,
"Value 2" = 2,
"Value 3" = 3,
)
)
shinyApp(ui = ui, server = server)
library(shiny)
ui<-fluidPage()
server<- function(input, output){}
library(shiny)
ui<-fluidPage()
server<- function(input, output){}
shinyApp(ui = ui, server = server)
library(shiny)
ui<-fluidPage("Hello World")
server<- function(input, output){}
shinyApp(ui = ui, server = server)
write.csv(export_tariff_final,"export_tariff_final.csv")
export_tariff_final
#PERCENTAGE CHANGE
export_tariff
export_tariff%>%
filter(hs4 =="0101"|hs4 =="0202")%>%
ggplot(aes(x = Date, y = perc_change_tariff, color = hs4))+
geom_point()+
geom_step()
library(shiny)
ui<-fluidPage(title = "TARRIFS AND TRADE",
#checkboxGroupInput(inputId = "Country", label = "Choose a country"), #US/CHINA
#radioButtons(),       #sector
#radioButtons(),       #product
#dateRangeInput(),   #time
)
server<- function(input, output){}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max =100),
plotOutput("hist")
)
server<-function(input,output){}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max =100),
plotOutput("hist")
)
server<-function(input,output){
output$hist <-renderPlot({hist(rnorm(100))}
)
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max =100),
plotOutput("hist")
)
server<-function(input,output){
output$hist <-renderPlot({hist(rnorm(num))}
)
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max =100),
plotOutput("hist")
)
server<-function(input,output){
output$hist <-renderPlot({hist(rnorm(input$num))}
)
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
US_tariff<-read.csv("export_tariff_final.csv")
US_tariff<-read.csv("export_tariff_final.csv")
US_tariff
US_tariff<-read.csv("export_tariff_final.csv")
US_tariff
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
US_tariff<-read.csv("export_tariff_final.csv")
US_tariff
US_tariff
View(US_tariff)
US_tariff<-
US_tariff%>%
mutate(Date = as.Date(Date))
View(US_tariff)
CH_tariff<-read.csv("export_tariff_final.csv")
CH_tariff<-
US_tariff%>%
mutate(Date = as.Date(Date))
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
exports<-read.csv("exports.csv")
View(exports)
Exports<-
exports%>%
mutate(Date= as.Date(Date))
#TESTING
ui<-fluidPage(
dateRangeInput(inputId = "date",
label = "Choose a range",
start = min(Exports$Date),
end = max(Exports$Date),
min = min(Exports$Date),
max =max(Exports$Date)),
format = "yyyy-mm-dd"
plotOutput("tariff")
)
server<-function(input,output){
}
)
}
shinyApp(ui = ui, server = server)
#TESTING
ui<-fluidPage(
dateRangeInput(inputId = "date",
label = "Choose a range",
start = min(Exports$Date),
end = max(Exports$Date),
min = min(Exports$Date),
max =max(Exports$Date)),
format = "yyyy-mm-dd"
plotOutput("tariff")
)
server<-function(input,output){
}
)
}
shinyApp(ui = ui, server = server)
#TESTING
ui<-fluidPage(
dateRangeInput(inputId = "date",
label = "Choose a range",
start = min(Exports$Date),
end = max(Exports$Date),
min = min(Exports$Date),
max =max(Exports$Date),
format = "yyyy-mm-dd"),
plotOutput("tariff")
)
server<-function(input,output){}
shinyApp(ui = ui, server = server)
#TESTING
ui<-fluidPage(
dateRangeInput(inputId = "date",
label = "Choose Dates",
start = min(Exports$Date),
end = max(Exports$Date),
min = min(Exports$Date),
max =max(Exports$Date),
format = "yyyy-mm-dd"),
plotOutput("tariff")
)
server<-function(input,output){}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(shiny)
library(shinydashboard)
library(readr)
library(DT)
library(scales)
library(lubridate)
library(readx1)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(shiny)
library(shinydashboard)
library(readr)
library(DT)
library(scales)
library(lubridate)
library(readx1)
install.packages("readx1")
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(shiny)
library(shinydashboard)
library(readr)
library(DT)
library(scales)
library(lubridate)
library(readx1)
#TESTING
ui<-fluidPage(
dateRangeInput(inputId = "date",
label = "Choose Dates",
start = min(Exports$Date),
end = max(Exports$Date),
min = min(Exports$Date),
max =max(Exports$Date),
format = "yyyy-mm-dd"),
plotOutput("tariff")
)
server<-function(input,output){
#output$tariff<-renderPlot(  )
output$dateRangeText<- renderText({
as.character(input$dateRange)
}
)
shinyApp(ui = ui, server = server)
